<!DOCTYPE html>  
<html lang="en">  
<head>  
    <meta charset="UTF-8">  
    <meta name="viewport" content="width=device-width, initial-scale=1.0">  
    <title>Student Profiles</title>  
    <style>  
        body {  
            font-family: Arial, sans-serif;  
            margin: 20px;  
            background-color: #f4f4f9;  
        }  

        h1 {  
            text-align: center;  
        }  

        form {  
            display: flex;  
            flex-direction: column;  
            gap: 10px;  
            max-width: 400px;  
            margin: auto;  
        }  

        input {  
            padding: 10px;  
            border: 1px solid #ccc;  
            border-radius: 4px;  
        }  

        button {  
            padding: 10px;  
            color: white;  
            background-color: #007bff;  
            border: none;  
            border-radius: 4px;  
            cursor: pointer;  
        }  

        button:hover {  
            background-color: #0056b3;  
        }  

        ul {  
            list-style: none;  
            padding: 0;  
            max-width: 400px;  
            margin: 20px auto;  
            background-color: white;  
            border-radius: 4px;  
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);  
        }  

        li {  
            padding: 10px;  
            border-bottom: 1px solid #ddd;  
            display: flex;  
            justify-content: space-between;  
            align-items: center;  
        }  

        li:last-child {  
            border-bottom: none;  
        }  

        .action-buttons {  
            display: flex;  
            gap: 10px;  
        }  
    </style>  
</head>  
<body>  

<h1>Student Profiles</h1>  

<!-- Form to add new student -->  
<form id="studentForm">  
    <input type="text" name="first_name" placeholder="First Name" required>  
    <input type="text" name="last_name" placeholder="Last Name" required>  
    <input type="date" name="dob" required>  
    <input type="email" name="email" placeholder="Email" required>  
    <button type="submit">Add Student</button>  
</form>  

<ul id="studentList"></ul>  

<script>  
let currentStudentId = null; // To track the current student for editing  

// Fetch students and display them  
async function fetchStudents() {  
    try {  
        const response = await fetch('/students');  
        const data = await response.json();  
        const studentList = document.getElementById('studentList');  
        studentList.innerHTML = ''; // Clear the list before adding new entries  

        data.forEach(student => {  
            const li = document.createElement('li');  
            li.textContent = `${student.first_name} ${student.last_name} (${student.email})`;  
            
            const actionButtons = document.createElement('div');  
            actionButtons.classList.add('action-buttons');  

            // Create a delete button  
            const deleteButton = document.createElement('button');  
            deleteButton.textContent = 'Delete';  
            deleteButton.addEventListener('click', async () => {  
                await fetch(`/students/${student.id}`, { method: 'DELETE' });  
                fetchStudents(); // Refresh the list  
            });  
            actionButtons.appendChild(deleteButton);  
            
            // Create an edit button  
            const editButton = document.createElement('button');  
            editButton.textContent = 'Edit';  
            editButton.addEventListener('click', () => {  
                // Fill the form with existing student data  
                document.querySelector('input[name="first_name"]').value = student.first_name;  
                document.querySelector('input[name="last_name"]').value = student.last_name;  
                document.querySelector('input[name="dob"]').value = new Date(student.dob).toISOString().split('T')[0];  
                document.querySelector('input[name="email"]').value = student.email;  

                currentStudentId = student.id; // Set current student ID for editing  
                document.querySelector('button[type="submit"]').textContent = 'Update Student'; // Change button text  
            });  
            actionButtons.appendChild(editButton);  
            
            li.appendChild(actionButtons);  
            studentList.appendChild(li);  
        });  
    } catch (error) {  
        console.error('Error fetching students:', error);  
    }  
}  

document.getElementById('studentForm').addEventListener('submit', async (e) => {  
    e.preventDefault(); // Prevents the form from refreshing the page  
    const formData = new FormData(e.target);  
    const data = Object.fromEntries(formData.entries());  

    try {  
        if (currentStudentId) { // Checking if we are in edit mode  
            await fetch(`/students/${currentStudentId}`, {  
                method: 'PUT', // Update existing student  
                headers: {  
                    'Content-Type': 'application/json'  
                },  
                body: JSON.stringify(data),  
            });  

            currentStudentId = null; // Reset after update  
            document.querySelector('button[type="submit"]').textContent = 'Add Student'; // Reset button text  
        } else {  
            // Post request to add new student  
            await fetch('/students', {  
                method: 'POST',  
                headers: {  
                    'Content-Type': 'application/json'  
                },  
                body: JSON.stringify(data),  
            });  
        }  
        
        fetchStudents(); // Refresh the student list  
        e.target.reset(); // Reset form fields   
    } catch (error) {  
        console.error('Error submitting form:', error);  
    }  
});  

fetchStudents(); // Initial fetch  
</script>  

</body>  
</html>
