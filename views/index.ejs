<!DOCTYPE html>  
<html lang="en">  
<head>  
    <meta charset="UTF-8">  
    <meta name="viewport" content="width=device-width, initial-scale=1.0">  
    <title>Manage Students and Attendance</title>  
    <style>  
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f4f4f9; }  
        h1 { text-align: center; }  
        form { display: flex; flex-direction: column; gap: 10px; max-width: 400px; margin: auto; }  
        input, select, button { padding: 10px; border: 1px solid #ccc; border-radius: 4px; }  
        button { color: white; background-color: #007bff; border: none; cursor: pointer; }  
        button:hover { background-color: #0056b3; }  
        .notification, .error { text-align: center; margin: 10px 0; }  
        .notification { color: green; }  
        .error { color: red; }  
    </style>  
</head>  
<body>  

<h1>Student and Attendance Management</h1>  

<div class="notification" id="notification"></div>  
<div class="error" id="error"></div>  

<!-- Form to add new student -->  
<form id="studentForm">  
    <label for="first_name">First Name</label>  
    <input type="text" name="first_name" placeholder="First Name" required>  
    <label for="last_name">Last Name</label>  
    <input type="text" name="last_name" placeholder="Last Name" required>  
    <label for="dob">Date of Birth</label>  
    <input type="date" name="dob" required>  
    <label for="email">Email</label>  
    <input type="email" name="email" placeholder="Email" required>  
    <button type="submit">Add Student</button>  
</form>  

<!-- Form to add attendance record -->  
<form id="attendanceForm">  
    <label for="studentId">Select Student</label>  
    <select name="studentId" required></select>  
    <label for="attendanceDate">Attendance Date</label>  
    <input type="date" name="attendanceDate" required>  
    <label for="status">Status</label>  
    <select name="status" required>  
        <option value="Present">Present</option>  
        <option value="Absent">Absent</option>  
    </select>  
    <button type="submit">Add Attendance</button>  
</form>  

<script>  
// Function to display notifications  
function showNotification(message) {  
    const notification = document.getElementById('notification');  
    notification.textContent = message;  
    setTimeout(() => notification.textContent = '', 3000);  
}  

// Function to display error messages  
function showError(message) {  
    const error = document.getElementById('error');  
    error.textContent = message;  
    setTimeout(() => error.textContent = '', 3000);  
}  

// Handle student form submission  
document.getElementById('studentForm').addEventListener('submit', async (e) => {  
    e.preventDefault(); // Prevents the form from refreshing the page  
    const formData = new FormData(e.target);  
    const data = Object.fromEntries(formData.entries());  

    try {  
        await fetch('/students', {  
            method: 'POST',  
            headers: { 'Content-Type': 'application/json' },  
            body: JSON.stringify(data),  
        });  
        showNotification('Student added successfully!');  
        e.target.reset(); // Reset form fields  
    } catch (error) {  
        showError('Error adding student: ' + error.message);  
    }  
});  

// Handle attendance form submission  
document.getElementById('attendanceForm').addEventListener('submit', async (e) => {  
    e.preventDefault(); // Prevents the form from refreshing the page  
    const formData = new FormData(e.target);  
    const data = Object.fromEntries(formData.entries());  

    try {  
        await fetch('/attendance', {  
            method: 'POST',  
            headers: { 'Content-Type': 'application/json' },  
            body: JSON.stringify(data),  
        });  
        showNotification('Attendance added successfully!');  
        e.target.reset(); // Reset form fields  
    } catch (error) {  
        showError('Error adding attendance: ' + error.message);  
    }  
});  

// Initialize student dropdown  
async function fetchStudents() {  
    try {  
        const response = await fetch('/students');  
        const students = await response.json();  
        const studentSelect = document.querySelector('select[name="studentId"]');  
        studentSelect.innerHTML = ''; // Clear previous options  

        students.forEach(student => {  
    const option = document.createElement('option');  
    option.value = student.id;  
    // Adjust these property names based on your actual data structure  
    option.textContent = `${student.first_name || ''} ${student.last_name || ''}`.trim() || 'Unknown Student';  
    studentSelect.appendChild(option);  
});
    } catch (error) {  
        console.error('Error fetching students:', error);  
    }  
}  

fetchStudents(); // Initial fetch for students  

</script>  
</body>  
</html>